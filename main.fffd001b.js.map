{"version":3,"sources":["scripts/main.js"],"names":["gameField","document","querySelector","gameScore","startRestartButton","startGameMessage","winMessage","loseMessage","rows","cells","score","board","updateScore","textContent","checkForWin","r","c","clearBoard","getRandomNumber","Math","random","getRandomIndex","round","hasEmptyTile","addNumber","found","rowIndex","cellIndex","updateGameField","updateTile","tile","num","innerText","classList","value","add","keyUpHandler","e","code","slideUp","slideDown","slideLeft","slideRight","remove","endGameHandler","removeEventListener","filterZeros","row","filter","slide","filteredRow","Set","length","i","push","reverse","addEventListener","target"],"mappings":"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","file":"main.fffd001b.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst startRestartButton = document.querySelector('.start');\nconst startGameMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst rows = 4;\nconst cells = 4;\nlet score = 0;\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartRestartButton.addEventListener('click', (e) => {\n  clearBoard();\n  startGameMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n\n  e.target.classList.remove('start');\n  e.target.classList.add('restart');\n  e.target.textContent = 'Restart';\n\n  document.addEventListener('keyup', keyUpHandler);\n\n  addNumber();\n  addNumber();\n\n  updateGameField();\n});\n\nfunction updateScore() {\n  gameScore.textContent = score;\n}\n\nfunction checkForWin() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cells; c++) {\n      if (board[r][c] >= 2048) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction clearBoard() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cells; c++) {\n      board[r][c] = 0;\n    }\n  }\n\n  score = 0;\n  updateScore();\n}\n\nfunction getRandomNumber() {\n  return Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction getRandomIndex() {\n  return Math.round(Math.random() * 3);\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cells; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addNumber() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const rowIndex = getRandomIndex();\n    const cellIndex = getRandomIndex();\n\n    if (!board[rowIndex][cellIndex]) {\n      board[rowIndex][cellIndex] = getRandomNumber();\n      found = true;\n    }\n  }\n}\n\nfunction updateGameField() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < cells; c++) {\n      const tile = gameField.rows[r].cells[c];\n      const num = board[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.classList.add(`field-cell--${num}`);\n    tile.innerText = num;\n  }\n}\n\nfunction keyUpHandler(e) {\n  switch (e.code) {\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      break;\n\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n  }\n\n  updateGameField();\n\n  if (checkForWin()) {\n    winMessage.classList.remove('hidden');\n    endGameHandler();\n  }\n\n  if (!hasEmptyTile()) {\n    loseMessage.classList.remove('hidden');\n    endGameHandler();\n  }\n\n  addNumber();\n  updateScore();\n}\n\nfunction endGameHandler() {\n  document.removeEventListener('keyup', keyUpHandler);\n  startRestartButton.classList.remove('restart');\n  startRestartButton.classList.add('start');\n  startRestartButton.textContent = 'Start';\n}\n\nfunction filterZeros(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let filteredRow = filterZeros(row);\n\n  if (new Set(filteredRow).length !== filteredRow.length) {\n    for (let i = 0; i < filteredRow.length - 1; i++) {\n      if (filteredRow[i] === filteredRow[i + 1]) {\n        filteredRow[i] *= 2;\n        filteredRow[i + 1] = 0;\n        score += filteredRow[i];\n      }\n    }\n\n    filteredRow = filterZeros(filteredRow);\n  }\n\n  while (filteredRow.length < cells) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n  }\n\n  updateGameField();\n};\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    board[r] = row;\n  }\n\n  updateGameField();\n}\n\nfunction slideUp() {\n  for (let c = 0; c < cells; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n    board[0][c] = row[0];\n    board[1][c] = row[1];\n    board[2][c] = row[2];\n    board[3][c] = row[3];\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < cells; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    board[3][c] = row[0];\n    board[2][c] = row[1];\n    board[1][c] = row[2];\n    board[0][c] = row[3];\n  }\n}\n"]}